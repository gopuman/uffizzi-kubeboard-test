name: Uffizzi Cluster Preview (deploy)

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
    paths-ignore:
        - 'docs/'
        - '.md'
        - 'tests/'
        - '!tests/.sh'
        - '!tests/apitests/'
        - '!tests/ci/'

permissions:
  contents: read
  pull-requests: write
  id-token: write
  actions: write

jobs:
  uffizzi-cluster-create:
    name: Create Uffizzi Cluster
    runs-on: ubuntu-latest
    outputs:
      git-ref: ${{ env.GIT_REF }}
      pr-number: ${{ env.PR_NUMBER }}
      action: ${{ env.ACTION }}
    steps:
    #   - name: 'Download artifacts'
    #     uses: actions/github-script@v6
    #     with:
    #       script: |
    #         let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
    #             owner: context.repo.owner,
    #             repo: context.repo.repo,
    #             run_id: context.payload.workflow_run.id,
    #         });
    #         let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
    #           return artifact.name == "preview-spec"
    #         })[0];
    #         if (matchArtifact === undefined) {
    #           throw TypeError('Build Artifact not found!');
    #         }
    #         let download = await github.rest.actions.downloadArtifact({
    #             owner: context.repo.owner,
    #             repo: context.repo.repo,
    #             artifact_id: matchArtifact.id,
    #             archive_format: 'zip',
    #         });
    #         let fs = require('fs');
    #         fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/preview-spec.zip`, Buffer.from(download.data));

    #   - name: 'Unzip artifact'
    #     run: unzip preview-spec.zip

    #   - name: Read Event into ENV
    #     run: |
    #       echo 'EVENT_JSON<<EOF' >> $GITHUB_ENV
    #       cat event.json >> $GITHUB_ENV
    #       echo -e '\nEOF' >> $GITHUB_ENV
    #   - name: Read PR Number From Event Object
    #     id: pr
    #     run: echo "PR_NUMBER=${{ fromJSON(env.EVENT_JSON).number }}" >> $GITHUB_ENV

    #   - name: Read Event Type from Event Object
    #     id: action
    #     run: echo "ACTION=${{ fromJSON(env.EVENT_JSON).action }}" >> $GITHUB_ENV

    #   - name: Read Git Ref From Event Object
    #     id: ref
    #     run: echo "GIT_REF=${{ fromJSON(env.EVENT_JSON).pull_request.head.sha }}" >> $GITHUB_ENV

    #   - name: DEBUG - Print Job Outputs
    #     if: ${{ runner.debug }}
    #     run: |
    #         echo "PR number: ${{ env.PR_NUMBER }}"
    #         echo "Git Ref: ${{ env.GIT_REF }}"
    #         echo "Manifests file hash: ${{ env.MANIFESTS_FILE_HASH }}"
    #         cat event.json

      # Identify comment to be updated
      - name: Find comment for Ephemeral Environment
        # if: ${{ fromJSON(env.EVENT_JSON).action != 'closed' }}
        uses: peter-evans/find-comment@v2
        id: find-comment
        with:
          issue-number: ${{ github.event.number }}
          comment-author: "github-actions[bot]"
          body-includes: ${{ github.event.number }}
          direction: last

        # Create/Update comment with action deployment status
      - name: Create or Update Comment with Deployment Notification
        # if: ${{ fromJSON(env.EVENT_JSON).action != 'closed' }}
        uses: peter-evans/create-or-update-comment@v2
        id: notification
        with:
            comment-id: ${{ steps.find-comment.outputs.comment-id }}
            issue-number: ${{ github.event.number }}
            body: |
                ## Uffizzi Ephemeral Environment - Virtual Cluster
                :cloud: deploying cluster pr-${{ github.event.number }}...
                :gear: Updating now by workflow run [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
                    Download the Uffizzi CLI to interact with the upcoming virtual cluster
                https://docs.uffizzi.com/install
            edit-mode: replace

    # Create/Connect to Uffizzi Virtual Cluster
      - name: Connect to Virtual Cluster
        # if: ${{ fromJSON(env.EVENT_JSON).action != 'closed' }}
        uses: UffizziCloud/cluster-action@main
        with:
            cluster-name: pr-${{ github.event.number }}

    # Create/Update comment with action deployment status
      - name: Create or Update Comment with Deployment URL
        # if: ${{ fromJSON(env.EVENT_JSON).action != 'closed' }}
        uses: peter-evans/create-or-update-comment@v2
        with:
            comment-id: ${{ steps.notification.outputs.comment-id }}
            issue-number: ${{ github.event.number }}
            body: |
                ## Uffizzi Ephemeral Environment - Virtual Cluster

                Your cluster `pr-${{ env.PR_NUMBER }}` was successfully created. Learn more about [Uffizzi virtual clusters](https://docs.uffizzi.com/topics/virtual-clusters)
                To connect to this cluster, follow these steps:

                1. Download and install the Uffizzi CLI from https://docs.uffizzi.com/install
                2. Login to Uffizzi, then select the `harbor` account and project:
                ```
                uffizzi login
                ```

                ```
                Select an account: 
                    ‣ ${{ github.event.repository.name }}
                    jdoe
                
                Select a project or create a new project: 
                    ‣ ${{ github.event.repository.name }}-6783521
                ```
                3. Update your kubeconfig: `uffizzi cluster update-kubeconfig pr-${{ github.event.number }} --kubeconfig=[PATH_TO_KUBECONFIG]`
                After updating your kubeconfig, you can manage your cluster with `kubectl`, `kustomize`, `helm`, and other tools that use kubeconfig files: `kubectl get namespace --kubeconfig [PATH_TO_KUBECONFIG]`

            edit-mode: replace

      - name: Apply Helm Chart
        # if: ${{ fromJSON(env.EVENT_JSON).action != 'closed' }}
        id: helm
        run: |
            export KUBECONFIG=kubeconfig
            helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
            helm upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard --namespace default

      - name: Create ingress
        # if: ${{ fromJSON(env.EVENT_JSON).action != 'closed' }}
        id: ingress
        run: |
            kubectl create ingress my-kubedb-ingress --kubeconfig="`pwd`/kubeconfig" \
                --rule="kubedb.uclusters.app.uffizzi.com/*=kubernetes-dashboard:443,tls"
            