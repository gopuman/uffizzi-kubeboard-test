name: Uffizzi Cluster Preview (deploy)

on:
  workflow_run:
    workflows: ["Preview (build)"]
    types:
      - completed

permissions:
  contents: read
  pull-requests: write
  id-token: write
  actions: write

jobs:
  uffizzi-cluster-create:
    name: Create Uffizzi Cluster
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      git-ref: ${{ env.GIT_REF }}
      pr-number: ${{ env.PR_NUMBER }}
      action: ${{ env.ACTION }}
    steps:
      - name: 'Download artifacts'
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "preview-spec"
            })[0];
            if (matchArtifact === undefined) {
              throw TypeError('Build Artifact not found!');
            }
            let download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/preview-spec.zip`, Buffer.from(download.data));

      - name: 'Unzip artifact'
        run: unzip preview-spec.zip

      - name: Read Event into ENV
        run: |
          echo 'EVENT_JSON<<EOF' >> $GITHUB_ENV
          cat event.json >> $GITHUB_ENV
          echo -e '\nEOF' >> $GITHUB_ENV
      - name: Read PR Number From Event Object
        id: pr
        run: echo "PR_NUMBER=${{ fromJSON(env.EVENT_JSON).number }}" >> $GITHUB_ENV

      - name: Read Event Type from Event Object
        id: action
        run: echo "ACTION=${{ fromJSON(env.EVENT_JSON).action }}" >> $GITHUB_ENV

      - name: Read Git Ref From Event Object
        id: ref
        run: echo "GIT_REF=${{ fromJSON(env.EVENT_JSON).pull_request.head.sha }}" >> $GITHUB_ENV

      - name: Create Uffizzi Cluster for Kubernetes Dashboard
        uses: UffizziCloud/cluster-action@main
        with:
          cluster-name: pr-${{ env.PR_NUMBER }}

      - name: Create/Update Comment with Deployment URL
        uses: peter-evans/create-or-update-comment@v2
        with:
          issue-number: ${{ env.PR_NUMBER }}
          body: |
            ## Uffizzi Ephemeral Environment - Virtual Cluster

            Your cluster `pr-${{ env.PR_NUMBER }}` was successfully created. Learn more about [Uffizzi virtual clusters](https://docs.uffizzi.com/topics/virtual-clusters)

    #   - name: Apply Kubernetes Dashboard
    #     run: |
    #       # Use kubectl or your deployment method to apply the Kubernetes Dashboard manifests
    #       kubectl apply -f path/to/kube-dashboard-manifests.yaml
